type felt = felt;
type Unit = Struct<ut@Tuple>;

libfunc felt_const<1> = felt_const<1>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc function_call<user@pass_by_ref::pass_by_ref::increment> = function_call<user@pass_by_ref::pass_by_ref::increment>;
libfunc drop<Unit> = drop<Unit>;
libfunc felt_add = felt_add;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;

felt_const<1>() -> ([0]);
store_temp<felt>([0]) -> ([3]);
function_call<user@pass_by_ref::pass_by_ref::increment>([3]) -> ([1], [2]);
drop<Unit>([2]) -> ();
store_temp<felt>([1]) -> ([4]);
return([4]);
felt_const<1>() -> ([1]);
felt_add([0], [1]) -> ([2]);
struct_construct<Unit>() -> ([3]);
drop<Unit>([3]) -> ();
struct_construct<Unit>() -> ([4]);
store_temp<felt>([2]) -> ([5]);
store_temp<Unit>([4]) -> ([6]);
return([5], [6]);

pass_by_ref::pass_by_ref::main@0() -> (felt);
pass_by_ref::pass_by_ref::increment@6([0]: felt) -> (felt, Unit);
