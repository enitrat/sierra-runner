type felt = felt;
type Unit = Struct<ut@Tuple>;

libfunc felt_const<1> = felt_const<1>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc felt_add = felt_add;
libfunc drop<felt> = drop<felt>;
libfunc function_call<user@inline::inline::not_inlined> = function_call<user@inline::inline::not_inlined>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc felt_const<2> = felt_const<2>;

felt_const<1>() -> ([0]);
felt_const<1>() -> ([1]);
store_temp<felt>([0]) -> ([0]);
felt_add([0], [1]) -> ([2]);
drop<felt>([2]) -> ();
function_call<user@inline::inline::not_inlined>() -> ([3]);
drop<felt>([3]) -> ();
struct_construct<Unit>() -> ([4]);
store_temp<Unit>([4]) -> ([5]);
return([5]);
felt_const<1>() -> ([0]);
felt_const<1>() -> ([1]);
store_temp<felt>([0]) -> ([0]);
felt_add([0], [1]) -> ([2]);
store_temp<felt>([2]) -> ([3]);
return([3]);
felt_const<2>() -> ([0]);
felt_const<2>() -> ([1]);
store_temp<felt>([0]) -> ([0]);
felt_add([0], [1]) -> ([2]);
store_temp<felt>([2]) -> ([3]);
return([3]);

inline::inline::main@0() -> (Unit);
inline::inline::inlined@10() -> (felt);
inline::inline::not_inlined@16() -> (felt);
