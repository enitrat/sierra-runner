type felt = felt;
type NonZero<felt> = NonZero<felt>;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;
type Tuple<Unit> = Struct<ut@Tuple, Unit>;
type Array<felt> = Array<felt>;
type core::PanicResult::<((),)> = Enum<ut@core::PanicResult::<((),)>, Tuple<Unit>, Array<felt>>;

libfunc felt_const<0> = felt_const<0>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc felt_sub = felt_sub;
libfunc felt_is_zero = felt_is_zero;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc felt_const<49> = felt_const<49>;
libfunc rename<core::bool> = rename<core::bool>;
libfunc function_call<user@core::assert> = function_call<user@core::assert>;
libfunc enum_match<core::PanicResult::<((),)>> = enum_match<core::PanicResult::<((),)>>;
libfunc struct_deconstruct<Tuple<Unit>> = struct_deconstruct<Tuple<Unit>>;
libfunc drop<Unit> = drop<Unit>;
libfunc struct_construct<Tuple<Unit>> = struct_construct<Tuple<Unit>>;
libfunc enum_init<core::PanicResult::<((),)>, 0> = enum_init<core::PanicResult::<((),)>, 0>;
libfunc store_temp<core::PanicResult::<((),)>> = store_temp<core::PanicResult::<((),)>>;
libfunc enum_init<core::PanicResult::<((),)>, 1> = enum_init<core::PanicResult::<((),)>, 1>;
libfunc bool_not_impl = bool_not_impl;
libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc drop<felt> = drop<felt>;
libfunc array_new<felt> = array_new<felt>;
libfunc array_append<felt> = array_append<felt>;

felt_const<0>() -> ([0]);
felt_const<0>() -> ([1]);
store_temp<felt>([0]) -> ([0]);
felt_sub([0], [1]) -> ([2]);
store_temp<felt>([2]) -> ([2]);
felt_is_zero([2]) { fallthrough() 11([3]) };
branch_align() -> ();
struct_construct<Unit>() -> ([4]);
enum_init<core::bool, 1>([4]) -> ([5]);
store_temp<core::bool>([5]) -> ([6]);
jump() { 16() };
branch_align() -> ();
drop<NonZero<felt>>([3]) -> ();
struct_construct<Unit>() -> ([7]);
enum_init<core::bool, 0>([7]) -> ([8]);
store_temp<core::bool>([8]) -> ([6]);
felt_const<49>() -> ([9]);
rename<core::bool>([6]) -> ([11]);
store_temp<felt>([9]) -> ([12]);
function_call<user@core::assert>([11], [12]) -> ([10]);
enum_match<core::PanicResult::<((),)>>([10]) { fallthrough([13]) 29([14]) };
branch_align() -> ();
struct_deconstruct<Tuple<Unit>>([13]) -> ([15]);
drop<Unit>([15]) -> ();
struct_construct<Unit>() -> ([16]);
struct_construct<Tuple<Unit>>([16]) -> ([17]);
enum_init<core::PanicResult::<((),)>, 0>([17]) -> ([18]);
store_temp<core::PanicResult::<((),)>>([18]) -> ([19]);
return([19]);
branch_align() -> ();
enum_init<core::PanicResult::<((),)>, 1>([14]) -> ([20]);
store_temp<core::PanicResult::<((),)>>([20]) -> ([21]);
return([21]);
bool_not_impl([0]) -> ([2]);
store_temp<core::bool>([2]) -> ([2]);
enum_match<core::bool>([2]) { fallthrough([3]) 44([4]) };
branch_align() -> ();
drop<Unit>([3]) -> ();
drop<felt>([1]) -> ();
struct_construct<Unit>() -> ([5]);
struct_construct<Tuple<Unit>>([5]) -> ([6]);
enum_init<core::PanicResult::<((),)>, 0>([6]) -> ([7]);
store_temp<core::PanicResult::<((),)>>([7]) -> ([8]);
return([8]);
branch_align() -> ();
drop<Unit>([4]) -> ();
array_new<felt>() -> ([9]);
array_append<felt>([9], [1]) -> ([10]);
struct_construct<Unit>() -> ([11]);
drop<Unit>([11]) -> ();
enum_init<core::PanicResult::<((),)>, 1>([10]) -> ([12]);
store_temp<core::PanicResult::<((),)>>([12]) -> ([13]);
return([13]);

assertions::assertions::main@0() -> (core::PanicResult::<((),)>);
core::assert@33([0]: core::bool, [1]: felt) -> (core::PanicResult::<((),)>);
